/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TermsIndexRouteImport } from './routes/terms/index'
import { Route as PrivacyIndexRouteImport } from './routes/privacy/index'
import { Route as LoginIndexRouteImport } from './routes/login/index'
import { Route as AuthenticatedStorageRouteImport } from './routes/_authenticated/storage'
import { Route as AuthenticatedSettingsRouteImport } from './routes/_authenticated/settings'
import { Route as AuthenticatedEventsRouteImport } from './routes/_authenticated/events'
import { Route as AuthenticatedDashboardRouteImport } from './routes/_authenticated/dashboard'
import { Route as AuthenticatedBrandingRouteImport } from './routes/_authenticated/branding'
import { Route as AuthenticatedAccountRouteImport } from './routes/_authenticated/account'
import { Route as AuthenticatedStorageIndexRouteImport } from './routes/_authenticated/storage/index'
import { Route as AuthenticatedSettingsIndexRouteImport } from './routes/_authenticated/settings/index'
import { Route as AuthenticatedEventsIndexRouteImport } from './routes/_authenticated/events/index'
import { Route as AuthenticatedDashboardIndexRouteImport } from './routes/_authenticated/dashboard/index'
import { Route as AuthenticatedBrandingIndexRouteImport } from './routes/_authenticated/branding/index'
import { Route as AuthenticatedAccountIndexRouteImport } from './routes/_authenticated/account/index'
import { Route as AuthenticatedEventsIdIndexRouteImport } from './routes/_authenticated/events/$id/index'

const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TermsIndexRoute = TermsIndexRouteImport.update({
  id: '/terms/',
  path: '/terms/',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivacyIndexRoute = PrivacyIndexRouteImport.update({
  id: '/privacy/',
  path: '/privacy/',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginIndexRoute = LoginIndexRouteImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedStorageRoute = AuthenticatedStorageRouteImport.update({
  id: '/storage',
  path: '/storage',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedSettingsRoute = AuthenticatedSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedEventsRoute = AuthenticatedEventsRouteImport.update({
  id: '/events',
  path: '/events',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedDashboardRoute = AuthenticatedDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedBrandingRoute = AuthenticatedBrandingRouteImport.update({
  id: '/branding',
  path: '/branding',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedAccountRoute = AuthenticatedAccountRouteImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedStorageIndexRoute =
  AuthenticatedStorageIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthenticatedStorageRoute,
  } as any)
const AuthenticatedSettingsIndexRoute =
  AuthenticatedSettingsIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthenticatedSettingsRoute,
  } as any)
const AuthenticatedEventsIndexRoute =
  AuthenticatedEventsIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthenticatedEventsRoute,
  } as any)
const AuthenticatedDashboardIndexRoute =
  AuthenticatedDashboardIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthenticatedDashboardRoute,
  } as any)
const AuthenticatedBrandingIndexRoute =
  AuthenticatedBrandingIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthenticatedBrandingRoute,
  } as any)
const AuthenticatedAccountIndexRoute =
  AuthenticatedAccountIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthenticatedAccountRoute,
  } as any)
const AuthenticatedEventsIdIndexRoute =
  AuthenticatedEventsIdIndexRouteImport.update({
    id: '/$id/',
    path: '/$id/',
    getParentRoute: () => AuthenticatedEventsRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/account': typeof AuthenticatedAccountRouteWithChildren
  '/branding': typeof AuthenticatedBrandingRouteWithChildren
  '/dashboard': typeof AuthenticatedDashboardRouteWithChildren
  '/events': typeof AuthenticatedEventsRouteWithChildren
  '/settings': typeof AuthenticatedSettingsRouteWithChildren
  '/storage': typeof AuthenticatedStorageRouteWithChildren
  '/login': typeof LoginIndexRoute
  '/privacy': typeof PrivacyIndexRoute
  '/terms': typeof TermsIndexRoute
  '/account/': typeof AuthenticatedAccountIndexRoute
  '/branding/': typeof AuthenticatedBrandingIndexRoute
  '/dashboard/': typeof AuthenticatedDashboardIndexRoute
  '/events/': typeof AuthenticatedEventsIndexRoute
  '/settings/': typeof AuthenticatedSettingsIndexRoute
  '/storage/': typeof AuthenticatedStorageIndexRoute
  '/events/$id': typeof AuthenticatedEventsIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginIndexRoute
  '/privacy': typeof PrivacyIndexRoute
  '/terms': typeof TermsIndexRoute
  '/account': typeof AuthenticatedAccountIndexRoute
  '/branding': typeof AuthenticatedBrandingIndexRoute
  '/dashboard': typeof AuthenticatedDashboardIndexRoute
  '/events': typeof AuthenticatedEventsIndexRoute
  '/settings': typeof AuthenticatedSettingsIndexRoute
  '/storage': typeof AuthenticatedStorageIndexRoute
  '/events/$id': typeof AuthenticatedEventsIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/_authenticated/account': typeof AuthenticatedAccountRouteWithChildren
  '/_authenticated/branding': typeof AuthenticatedBrandingRouteWithChildren
  '/_authenticated/dashboard': typeof AuthenticatedDashboardRouteWithChildren
  '/_authenticated/events': typeof AuthenticatedEventsRouteWithChildren
  '/_authenticated/settings': typeof AuthenticatedSettingsRouteWithChildren
  '/_authenticated/storage': typeof AuthenticatedStorageRouteWithChildren
  '/login/': typeof LoginIndexRoute
  '/privacy/': typeof PrivacyIndexRoute
  '/terms/': typeof TermsIndexRoute
  '/_authenticated/account/': typeof AuthenticatedAccountIndexRoute
  '/_authenticated/branding/': typeof AuthenticatedBrandingIndexRoute
  '/_authenticated/dashboard/': typeof AuthenticatedDashboardIndexRoute
  '/_authenticated/events/': typeof AuthenticatedEventsIndexRoute
  '/_authenticated/settings/': typeof AuthenticatedSettingsIndexRoute
  '/_authenticated/storage/': typeof AuthenticatedStorageIndexRoute
  '/_authenticated/events/$id/': typeof AuthenticatedEventsIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/account'
    | '/branding'
    | '/dashboard'
    | '/events'
    | '/settings'
    | '/storage'
    | '/login'
    | '/privacy'
    | '/terms'
    | '/account/'
    | '/branding/'
    | '/dashboard/'
    | '/events/'
    | '/settings/'
    | '/storage/'
    | '/events/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/privacy'
    | '/terms'
    | '/account'
    | '/branding'
    | '/dashboard'
    | '/events'
    | '/settings'
    | '/storage'
    | '/events/$id'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/_authenticated/account'
    | '/_authenticated/branding'
    | '/_authenticated/dashboard'
    | '/_authenticated/events'
    | '/_authenticated/settings'
    | '/_authenticated/storage'
    | '/login/'
    | '/privacy/'
    | '/terms/'
    | '/_authenticated/account/'
    | '/_authenticated/branding/'
    | '/_authenticated/dashboard/'
    | '/_authenticated/events/'
    | '/_authenticated/settings/'
    | '/_authenticated/storage/'
    | '/_authenticated/events/$id/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  LoginIndexRoute: typeof LoginIndexRoute
  PrivacyIndexRoute: typeof PrivacyIndexRoute
  TermsIndexRoute: typeof TermsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/terms/': {
      id: '/terms/'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacy/': {
      id: '/privacy/'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/storage': {
      id: '/_authenticated/storage'
      path: '/storage'
      fullPath: '/storage'
      preLoaderRoute: typeof AuthenticatedStorageRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/settings': {
      id: '/_authenticated/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthenticatedSettingsRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/events': {
      id: '/_authenticated/events'
      path: '/events'
      fullPath: '/events'
      preLoaderRoute: typeof AuthenticatedEventsRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/dashboard': {
      id: '/_authenticated/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthenticatedDashboardRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/branding': {
      id: '/_authenticated/branding'
      path: '/branding'
      fullPath: '/branding'
      preLoaderRoute: typeof AuthenticatedBrandingRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/account': {
      id: '/_authenticated/account'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AuthenticatedAccountRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/storage/': {
      id: '/_authenticated/storage/'
      path: '/'
      fullPath: '/storage/'
      preLoaderRoute: typeof AuthenticatedStorageIndexRouteImport
      parentRoute: typeof AuthenticatedStorageRoute
    }
    '/_authenticated/settings/': {
      id: '/_authenticated/settings/'
      path: '/'
      fullPath: '/settings/'
      preLoaderRoute: typeof AuthenticatedSettingsIndexRouteImport
      parentRoute: typeof AuthenticatedSettingsRoute
    }
    '/_authenticated/events/': {
      id: '/_authenticated/events/'
      path: '/'
      fullPath: '/events/'
      preLoaderRoute: typeof AuthenticatedEventsIndexRouteImport
      parentRoute: typeof AuthenticatedEventsRoute
    }
    '/_authenticated/dashboard/': {
      id: '/_authenticated/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof AuthenticatedDashboardIndexRouteImport
      parentRoute: typeof AuthenticatedDashboardRoute
    }
    '/_authenticated/branding/': {
      id: '/_authenticated/branding/'
      path: '/'
      fullPath: '/branding/'
      preLoaderRoute: typeof AuthenticatedBrandingIndexRouteImport
      parentRoute: typeof AuthenticatedBrandingRoute
    }
    '/_authenticated/account/': {
      id: '/_authenticated/account/'
      path: '/'
      fullPath: '/account/'
      preLoaderRoute: typeof AuthenticatedAccountIndexRouteImport
      parentRoute: typeof AuthenticatedAccountRoute
    }
    '/_authenticated/events/$id/': {
      id: '/_authenticated/events/$id/'
      path: '/$id'
      fullPath: '/events/$id'
      preLoaderRoute: typeof AuthenticatedEventsIdIndexRouteImport
      parentRoute: typeof AuthenticatedEventsRoute
    }
  }
}

interface AuthenticatedAccountRouteChildren {
  AuthenticatedAccountIndexRoute: typeof AuthenticatedAccountIndexRoute
}

const AuthenticatedAccountRouteChildren: AuthenticatedAccountRouteChildren = {
  AuthenticatedAccountIndexRoute: AuthenticatedAccountIndexRoute,
}

const AuthenticatedAccountRouteWithChildren =
  AuthenticatedAccountRoute._addFileChildren(AuthenticatedAccountRouteChildren)

interface AuthenticatedBrandingRouteChildren {
  AuthenticatedBrandingIndexRoute: typeof AuthenticatedBrandingIndexRoute
}

const AuthenticatedBrandingRouteChildren: AuthenticatedBrandingRouteChildren = {
  AuthenticatedBrandingIndexRoute: AuthenticatedBrandingIndexRoute,
}

const AuthenticatedBrandingRouteWithChildren =
  AuthenticatedBrandingRoute._addFileChildren(
    AuthenticatedBrandingRouteChildren,
  )

interface AuthenticatedDashboardRouteChildren {
  AuthenticatedDashboardIndexRoute: typeof AuthenticatedDashboardIndexRoute
}

const AuthenticatedDashboardRouteChildren: AuthenticatedDashboardRouteChildren =
  {
    AuthenticatedDashboardIndexRoute: AuthenticatedDashboardIndexRoute,
  }

const AuthenticatedDashboardRouteWithChildren =
  AuthenticatedDashboardRoute._addFileChildren(
    AuthenticatedDashboardRouteChildren,
  )

interface AuthenticatedEventsRouteChildren {
  AuthenticatedEventsIndexRoute: typeof AuthenticatedEventsIndexRoute
  AuthenticatedEventsIdIndexRoute: typeof AuthenticatedEventsIdIndexRoute
}

const AuthenticatedEventsRouteChildren: AuthenticatedEventsRouteChildren = {
  AuthenticatedEventsIndexRoute: AuthenticatedEventsIndexRoute,
  AuthenticatedEventsIdIndexRoute: AuthenticatedEventsIdIndexRoute,
}

const AuthenticatedEventsRouteWithChildren =
  AuthenticatedEventsRoute._addFileChildren(AuthenticatedEventsRouteChildren)

interface AuthenticatedSettingsRouteChildren {
  AuthenticatedSettingsIndexRoute: typeof AuthenticatedSettingsIndexRoute
}

const AuthenticatedSettingsRouteChildren: AuthenticatedSettingsRouteChildren = {
  AuthenticatedSettingsIndexRoute: AuthenticatedSettingsIndexRoute,
}

const AuthenticatedSettingsRouteWithChildren =
  AuthenticatedSettingsRoute._addFileChildren(
    AuthenticatedSettingsRouteChildren,
  )

interface AuthenticatedStorageRouteChildren {
  AuthenticatedStorageIndexRoute: typeof AuthenticatedStorageIndexRoute
}

const AuthenticatedStorageRouteChildren: AuthenticatedStorageRouteChildren = {
  AuthenticatedStorageIndexRoute: AuthenticatedStorageIndexRoute,
}

const AuthenticatedStorageRouteWithChildren =
  AuthenticatedStorageRoute._addFileChildren(AuthenticatedStorageRouteChildren)

interface AuthenticatedRouteChildren {
  AuthenticatedAccountRoute: typeof AuthenticatedAccountRouteWithChildren
  AuthenticatedBrandingRoute: typeof AuthenticatedBrandingRouteWithChildren
  AuthenticatedDashboardRoute: typeof AuthenticatedDashboardRouteWithChildren
  AuthenticatedEventsRoute: typeof AuthenticatedEventsRouteWithChildren
  AuthenticatedSettingsRoute: typeof AuthenticatedSettingsRouteWithChildren
  AuthenticatedStorageRoute: typeof AuthenticatedStorageRouteWithChildren
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedAccountRoute: AuthenticatedAccountRouteWithChildren,
  AuthenticatedBrandingRoute: AuthenticatedBrandingRouteWithChildren,
  AuthenticatedDashboardRoute: AuthenticatedDashboardRouteWithChildren,
  AuthenticatedEventsRoute: AuthenticatedEventsRouteWithChildren,
  AuthenticatedSettingsRoute: AuthenticatedSettingsRouteWithChildren,
  AuthenticatedStorageRoute: AuthenticatedStorageRouteWithChildren,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  LoginIndexRoute: LoginIndexRoute,
  PrivacyIndexRoute: PrivacyIndexRoute,
  TermsIndexRoute: TermsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
