// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: event_views.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countEventViews = `-- name: CountEventViews :one
SELECT COUNT(*) FROM event_views
`

func (q *Queries) CountEventViews(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countEventViews)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countEventViewsByEvent = `-- name: CountEventViewsByEvent :one
SELECT COUNT(*) FROM event_views
WHERE event_id = $1
`

func (q *Queries) CountEventViewsByEvent(ctx context.Context, eventID int64) (int64, error) {
	row := q.db.QueryRow(ctx, countEventViewsByEvent, eventID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countEventViewsByEventAndDateRange = `-- name: CountEventViewsByEventAndDateRange :one
SELECT COUNT(*) FROM event_views
WHERE event_id = $1
  AND viewed_at >= $2
  AND viewed_at <= $3
`

type CountEventViewsByEventAndDateRangeParams struct {
	EventID    int64
	ViewedAt   int64
	ViewedAt_2 int64
}

func (q *Queries) CountEventViewsByEventAndDateRange(ctx context.Context, arg CountEventViewsByEventAndDateRangeParams) (int64, error) {
	row := q.db.QueryRow(ctx, countEventViewsByEventAndDateRange, arg.EventID, arg.ViewedAt, arg.ViewedAt_2)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUniqueIPsByEvent = `-- name: CountUniqueIPsByEvent :one
SELECT COUNT(DISTINCT ip_address) FROM event_views
WHERE event_id = $1
`

func (q *Queries) CountUniqueIPsByEvent(ctx context.Context, eventID int64) (int64, error) {
	row := q.db.QueryRow(ctx, countUniqueIPsByEvent, eventID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createEventView = `-- name: CreateEventView :one
INSERT INTO event_views (event_id, ip_address, user_agent, referer, viewed_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, event_id, ip_address, user_agent, referer, viewed_at
`

type CreateEventViewParams struct {
	EventID   int64
	IPAddress pgtype.Text
	UserAgent pgtype.Text
	Referer   pgtype.Text
	ViewedAt  int64
}

func (q *Queries) CreateEventView(ctx context.Context, arg CreateEventViewParams) (EventView, error) {
	row := q.db.QueryRow(ctx, createEventView,
		arg.EventID,
		arg.IPAddress,
		arg.UserAgent,
		arg.Referer,
		arg.ViewedAt,
	)
	var i EventView
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.IPAddress,
		&i.UserAgent,
		&i.Referer,
		&i.ViewedAt,
	)
	return i, err
}

const deleteEventView = `-- name: DeleteEventView :exec
DELETE FROM event_views
WHERE id = $1
`

func (q *Queries) DeleteEventView(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteEventView, id)
	return err
}

const deleteEventViewsByEvent = `-- name: DeleteEventViewsByEvent :exec
DELETE FROM event_views
WHERE event_id = $1
`

func (q *Queries) DeleteEventViewsByEvent(ctx context.Context, eventID int64) error {
	_, err := q.db.Exec(ctx, deleteEventViewsByEvent, eventID)
	return err
}

const getEventViewByID = `-- name: GetEventViewByID :one
SELECT id, event_id, ip_address, user_agent, referer, viewed_at FROM event_views
WHERE id = $1
`

func (q *Queries) GetEventViewByID(ctx context.Context, id int64) (EventView, error) {
	row := q.db.QueryRow(ctx, getEventViewByID, id)
	var i EventView
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.IPAddress,
		&i.UserAgent,
		&i.Referer,
		&i.ViewedAt,
	)
	return i, err
}

const getEventViewsGroupedByDay = `-- name: GetEventViewsGroupedByDay :many
SELECT DATE(TO_TIMESTAMP(viewed_at / 1000)) as day, COUNT(*) as views
FROM event_views
WHERE event_id = $1
  AND viewed_at >= $2
  AND viewed_at <= $3
GROUP BY day
ORDER BY day DESC
`

type GetEventViewsGroupedByDayParams struct {
	EventID    int64
	ViewedAt   int64
	ViewedAt_2 int64
}

type GetEventViewsGroupedByDayRow struct {
	Day   pgtype.Date
	Views int64
}

func (q *Queries) GetEventViewsGroupedByDay(ctx context.Context, arg GetEventViewsGroupedByDayParams) ([]GetEventViewsGroupedByDayRow, error) {
	rows, err := q.db.Query(ctx, getEventViewsGroupedByDay, arg.EventID, arg.ViewedAt, arg.ViewedAt_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEventViewsGroupedByDayRow
	for rows.Next() {
		var i GetEventViewsGroupedByDayRow
		if err := rows.Scan(&i.Day, &i.Views); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTopEventsByViews = `-- name: GetTopEventsByViews :many
SELECT event_id, COUNT(*) as view_count
FROM event_views
GROUP BY event_id
ORDER BY view_count DESC
LIMIT $1
`

type GetTopEventsByViewsRow struct {
	EventID   int64
	ViewCount int64
}

func (q *Queries) GetTopEventsByViews(ctx context.Context, limit int32) ([]GetTopEventsByViewsRow, error) {
	rows, err := q.db.Query(ctx, getTopEventsByViews, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTopEventsByViewsRow
	for rows.Next() {
		var i GetTopEventsByViewsRow
		if err := rows.Scan(&i.EventID, &i.ViewCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEventViews = `-- name: ListEventViews :many
SELECT id, event_id, ip_address, user_agent, referer, viewed_at FROM event_views
ORDER BY viewed_at DESC
LIMIT $1 OFFSET $2
`

type ListEventViewsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListEventViews(ctx context.Context, arg ListEventViewsParams) ([]EventView, error) {
	rows, err := q.db.Query(ctx, listEventViews, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EventView
	for rows.Next() {
		var i EventView
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.IPAddress,
			&i.UserAgent,
			&i.Referer,
			&i.ViewedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEventViewsByEvent = `-- name: ListEventViewsByEvent :many
SELECT id, event_id, ip_address, user_agent, referer, viewed_at FROM event_views
WHERE event_id = $1
ORDER BY viewed_at DESC
LIMIT $2 OFFSET $3
`

type ListEventViewsByEventParams struct {
	EventID int64
	Limit   int32
	Offset  int32
}

func (q *Queries) ListEventViewsByEvent(ctx context.Context, arg ListEventViewsByEventParams) ([]EventView, error) {
	rows, err := q.db.Query(ctx, listEventViewsByEvent, arg.EventID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EventView
	for rows.Next() {
		var i EventView
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.IPAddress,
			&i.UserAgent,
			&i.Referer,
			&i.ViewedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEventViewsByEventAndDateRange = `-- name: ListEventViewsByEventAndDateRange :many
SELECT id, event_id, ip_address, user_agent, referer, viewed_at FROM event_views
WHERE event_id = $1
  AND viewed_at >= $2
  AND viewed_at <= $3
ORDER BY viewed_at DESC
LIMIT $4 OFFSET $5
`

type ListEventViewsByEventAndDateRangeParams struct {
	EventID    int64
	ViewedAt   int64
	ViewedAt_2 int64
	Limit      int32
	Offset     int32
}

func (q *Queries) ListEventViewsByEventAndDateRange(ctx context.Context, arg ListEventViewsByEventAndDateRangeParams) ([]EventView, error) {
	rows, err := q.db.Query(ctx, listEventViewsByEventAndDateRange,
		arg.EventID,
		arg.ViewedAt,
		arg.ViewedAt_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EventView
	for rows.Next() {
		var i EventView
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.IPAddress,
			&i.UserAgent,
			&i.Referer,
			&i.ViewedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEventViewsByIP = `-- name: ListEventViewsByIP :many
SELECT id, event_id, ip_address, user_agent, referer, viewed_at FROM event_views
WHERE ip_address = $1
ORDER BY viewed_at DESC
LIMIT $2 OFFSET $3
`

type ListEventViewsByIPParams struct {
	IPAddress pgtype.Text
	Limit     int32
	Offset    int32
}

func (q *Queries) ListEventViewsByIP(ctx context.Context, arg ListEventViewsByIPParams) ([]EventView, error) {
	rows, err := q.db.Query(ctx, listEventViewsByIP, arg.IPAddress, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EventView
	for rows.Next() {
		var i EventView
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.IPAddress,
			&i.UserAgent,
			&i.Referer,
			&i.ViewedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
