// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: tenants.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countTenants = `-- name: CountTenants :one
SELECT COUNT(*) FROM tenants
`

func (q *Queries) CountTenants(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countTenants)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createTenant = `-- name: CreateTenant :one
INSERT INTO tenants (clerk_org_id, watermark_media_url, watermark_opacity, created, updated)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, clerk_org_id, watermark_media_url, watermark_opacity, created, updated
`

type CreateTenantParams struct {
	ClerkOrgID        string
	WatermarkMediaUrl pgtype.Text
	WatermarkOpacity  pgtype.Numeric
	Created           int64
	Updated           int64
}

func (q *Queries) CreateTenant(ctx context.Context, arg CreateTenantParams) (Tenant, error) {
	row := q.db.QueryRow(ctx, createTenant,
		arg.ClerkOrgID,
		arg.WatermarkMediaUrl,
		arg.WatermarkOpacity,
		arg.Created,
		arg.Updated,
	)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.ClerkOrgID,
		&i.WatermarkMediaUrl,
		&i.WatermarkOpacity,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const deleteTenant = `-- name: DeleteTenant :exec
DELETE FROM tenants
WHERE id = $1
`

func (q *Queries) DeleteTenant(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTenant, id)
	return err
}

const getTenantByClerkOrgID = `-- name: GetTenantByClerkOrgID :one
SELECT id, clerk_org_id, watermark_media_url, watermark_opacity, created, updated FROM tenants
WHERE clerk_org_id = $1
`

func (q *Queries) GetTenantByClerkOrgID(ctx context.Context, clerkOrgID string) (Tenant, error) {
	row := q.db.QueryRow(ctx, getTenantByClerkOrgID, clerkOrgID)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.ClerkOrgID,
		&i.WatermarkMediaUrl,
		&i.WatermarkOpacity,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getTenantByID = `-- name: GetTenantByID :one
SELECT id, clerk_org_id, watermark_media_url, watermark_opacity, created, updated FROM tenants
WHERE id = $1
`

func (q *Queries) GetTenantByID(ctx context.Context, id int64) (Tenant, error) {
	row := q.db.QueryRow(ctx, getTenantByID, id)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.ClerkOrgID,
		&i.WatermarkMediaUrl,
		&i.WatermarkOpacity,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const listTenants = `-- name: ListTenants :many
SELECT id, clerk_org_id, watermark_media_url, watermark_opacity, created, updated FROM tenants
ORDER BY created DESC
LIMIT $1 OFFSET $2
`

type ListTenantsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListTenants(ctx context.Context, arg ListTenantsParams) ([]Tenant, error) {
	rows, err := q.db.Query(ctx, listTenants, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tenant
	for rows.Next() {
		var i Tenant
		if err := rows.Scan(
			&i.ID,
			&i.ClerkOrgID,
			&i.WatermarkMediaUrl,
			&i.WatermarkOpacity,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTenant = `-- name: UpdateTenant :one
UPDATE tenants
SET watermark_media_url = COALESCE($3, watermark_media_url),
    watermark_opacity = COALESCE($4, watermark_opacity),
    updated = $1
WHERE id = $2
RETURNING id, clerk_org_id, watermark_media_url, watermark_opacity, created, updated
`

type UpdateTenantParams struct {
	Updated           int64
	ID                int64
	WatermarkMediaUrl pgtype.Text
	WatermarkOpacity  pgtype.Numeric
}

func (q *Queries) UpdateTenant(ctx context.Context, arg UpdateTenantParams) (Tenant, error) {
	row := q.db.QueryRow(ctx, updateTenant,
		arg.Updated,
		arg.ID,
		arg.WatermarkMediaUrl,
		arg.WatermarkOpacity,
	)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.ClerkOrgID,
		&i.WatermarkMediaUrl,
		&i.WatermarkOpacity,
		&i.Created,
		&i.Updated,
	)
	return i, err
}
