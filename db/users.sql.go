// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package db

import (
	"context"
)

const countUsers = `-- name: CountUsers :one
SELECT COUNT(*) FROM users
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (clerk_user_id, created, updated)
VALUES ($1, $2, $3)
RETURNING id, clerk_user_id, created, updated
`

type CreateUserParams struct {
	ClerkUserID string
	Created     int64
	Updated     int64
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.ClerkUserID, arg.Created, arg.Updated)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ClerkUserID,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByClerkUserID = `-- name: GetUserByClerkUserID :one
SELECT id, clerk_user_id, created, updated FROM users
WHERE clerk_user_id = $1
`

func (q *Queries) GetUserByClerkUserID(ctx context.Context, clerkUserID string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByClerkUserID, clerkUserID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ClerkUserID,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, clerk_user_id, created, updated FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ClerkUserID,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, clerk_user_id, created, updated FROM users
ORDER BY created DESC
LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.ClerkUserID,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET updated = $1
WHERE id = $2
RETURNING id, clerk_user_id, created, updated
`

type UpdateUserParams struct {
	Updated int64
	ID      int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.Updated, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ClerkUserID,
		&i.Created,
		&i.Updated,
	)
	return i, err
}
