// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: media.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countMedia = `-- name: CountMedia :one
SELECT COUNT(*) FROM media
`

func (q *Queries) CountMedia(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countMedia)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countMediaByAlbum = `-- name: CountMediaByAlbum :one
SELECT COUNT(*) FROM media
WHERE album_id = $1
`

func (q *Queries) CountMediaByAlbum(ctx context.Context, albumID int64) (int64, error) {
	row := q.db.QueryRow(ctx, countMediaByAlbum, albumID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countMediaByAlbumAndType = `-- name: CountMediaByAlbumAndType :one
SELECT COUNT(*) FROM media
WHERE album_id = $1 AND media_type = $2
`

type CountMediaByAlbumAndTypeParams struct {
	AlbumID   int64
	MediaType string
}

func (q *Queries) CountMediaByAlbumAndType(ctx context.Context, arg CountMediaByAlbumAndTypeParams) (int64, error) {
	row := q.db.QueryRow(ctx, countMediaByAlbumAndType, arg.AlbumID, arg.MediaType)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createMedia = `-- name: CreateMedia :one
INSERT INTO media (album_id, url, media_type, file_size, created, updated)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, album_id, url, media_type, file_size, created, updated
`

type CreateMediaParams struct {
	AlbumID   int64
	Url       string
	MediaType string
	FileSize  pgtype.Int8
	Created   int64
	Updated   int64
}

func (q *Queries) CreateMedia(ctx context.Context, arg CreateMediaParams) (Medium, error) {
	row := q.db.QueryRow(ctx, createMedia,
		arg.AlbumID,
		arg.Url,
		arg.MediaType,
		arg.FileSize,
		arg.Created,
		arg.Updated,
	)
	var i Medium
	err := row.Scan(
		&i.ID,
		&i.AlbumID,
		&i.Url,
		&i.MediaType,
		&i.FileSize,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const deleteMedia = `-- name: DeleteMedia :exec
DELETE FROM media
WHERE id = $1
`

func (q *Queries) DeleteMedia(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteMedia, id)
	return err
}

const deleteMediaByAlbum = `-- name: DeleteMediaByAlbum :exec
DELETE FROM media
WHERE album_id = $1
`

func (q *Queries) DeleteMediaByAlbum(ctx context.Context, albumID int64) error {
	_, err := q.db.Exec(ctx, deleteMediaByAlbum, albumID)
	return err
}

const getMediaByID = `-- name: GetMediaByID :one
SELECT id, album_id, url, media_type, file_size, created, updated FROM media
WHERE id = $1
`

func (q *Queries) GetMediaByID(ctx context.Context, id int64) (Medium, error) {
	row := q.db.QueryRow(ctx, getMediaByID, id)
	var i Medium
	err := row.Scan(
		&i.ID,
		&i.AlbumID,
		&i.Url,
		&i.MediaType,
		&i.FileSize,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getMediaTypeStats = `-- name: GetMediaTypeStats :many
SELECT media_type, COUNT(*) as count, COALESCE(SUM(file_size), 0) as total_size
FROM media
WHERE album_id = $1
GROUP BY media_type
`

type GetMediaTypeStatsRow struct {
	MediaType string
	Count     int64
	TotalSize interface{}
}

func (q *Queries) GetMediaTypeStats(ctx context.Context, albumID int64) ([]GetMediaTypeStatsRow, error) {
	rows, err := q.db.Query(ctx, getMediaTypeStats, albumID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMediaTypeStatsRow
	for rows.Next() {
		var i GetMediaTypeStatsRow
		if err := rows.Scan(&i.MediaType, &i.Count, &i.TotalSize); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalMediaSizeByAlbum = `-- name: GetTotalMediaSizeByAlbum :one
SELECT COALESCE(SUM(file_size), 0) as total_size
FROM media
WHERE album_id = $1
`

func (q *Queries) GetTotalMediaSizeByAlbum(ctx context.Context, albumID int64) (interface{}, error) {
	row := q.db.QueryRow(ctx, getTotalMediaSizeByAlbum, albumID)
	var total_size interface{}
	err := row.Scan(&total_size)
	return total_size, err
}

const listMedia = `-- name: ListMedia :many
SELECT id, album_id, url, media_type, file_size, created, updated FROM media
ORDER BY created DESC
LIMIT $1 OFFSET $2
`

type ListMediaParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListMedia(ctx context.Context, arg ListMediaParams) ([]Medium, error) {
	rows, err := q.db.Query(ctx, listMedia, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Medium
	for rows.Next() {
		var i Medium
		if err := rows.Scan(
			&i.ID,
			&i.AlbumID,
			&i.Url,
			&i.MediaType,
			&i.FileSize,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMediaByAlbum = `-- name: ListMediaByAlbum :many
SELECT id, album_id, url, media_type, file_size, created, updated FROM media
WHERE album_id = $1
ORDER BY created DESC
LIMIT $2 OFFSET $3
`

type ListMediaByAlbumParams struct {
	AlbumID int64
	Limit   int32
	Offset  int32
}

func (q *Queries) ListMediaByAlbum(ctx context.Context, arg ListMediaByAlbumParams) ([]Medium, error) {
	rows, err := q.db.Query(ctx, listMediaByAlbum, arg.AlbumID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Medium
	for rows.Next() {
		var i Medium
		if err := rows.Scan(
			&i.ID,
			&i.AlbumID,
			&i.Url,
			&i.MediaType,
			&i.FileSize,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMediaByAlbumAndType = `-- name: ListMediaByAlbumAndType :many
SELECT id, album_id, url, media_type, file_size, created, updated FROM media
WHERE album_id = $1 AND media_type = $2
ORDER BY created DESC
LIMIT $3 OFFSET $4
`

type ListMediaByAlbumAndTypeParams struct {
	AlbumID   int64
	MediaType string
	Limit     int32
	Offset    int32
}

func (q *Queries) ListMediaByAlbumAndType(ctx context.Context, arg ListMediaByAlbumAndTypeParams) ([]Medium, error) {
	rows, err := q.db.Query(ctx, listMediaByAlbumAndType,
		arg.AlbumID,
		arg.MediaType,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Medium
	for rows.Next() {
		var i Medium
		if err := rows.Scan(
			&i.ID,
			&i.AlbumID,
			&i.Url,
			&i.MediaType,
			&i.FileSize,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMedia = `-- name: UpdateMedia :one
UPDATE media
SET url = COALESCE($3, url),
    media_type = COALESCE($4, media_type),
    file_size = COALESCE($5, file_size),
    updated = $1
WHERE id = $2
RETURNING id, album_id, url, media_type, file_size, created, updated
`

type UpdateMediaParams struct {
	Updated   int64
	ID        int64
	Url       pgtype.Text
	MediaType pgtype.Text
	FileSize  pgtype.Int8
}

func (q *Queries) UpdateMedia(ctx context.Context, arg UpdateMediaParams) (Medium, error) {
	row := q.db.QueryRow(ctx, updateMedia,
		arg.Updated,
		arg.ID,
		arg.Url,
		arg.MediaType,
		arg.FileSize,
	)
	var i Medium
	err := row.Scan(
		&i.ID,
		&i.AlbumID,
		&i.Url,
		&i.MediaType,
		&i.FileSize,
		&i.Created,
		&i.Updated,
	)
	return i, err
}
