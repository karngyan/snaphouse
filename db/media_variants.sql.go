// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: media_variants.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countMediaVariants = `-- name: CountMediaVariants :one
SELECT COUNT(*) FROM media_variants
`

func (q *Queries) CountMediaVariants(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countMediaVariants)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countMediaVariantsByMedia = `-- name: CountMediaVariantsByMedia :one
SELECT COUNT(*) FROM media_variants
WHERE media_id = $1
`

func (q *Queries) CountMediaVariantsByMedia(ctx context.Context, mediaID int64) (int64, error) {
	row := q.db.QueryRow(ctx, countMediaVariantsByMedia, mediaID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createMediaVariant = `-- name: CreateMediaVariant :one
INSERT INTO media_variants (media_id, variant_type, url, width, height, file_size, created)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, media_id, variant_type, url, width, height, file_size, created
`

type CreateMediaVariantParams struct {
	MediaID     int64
	VariantType string
	Url         string
	Width       pgtype.Int4
	Height      pgtype.Int4
	FileSize    pgtype.Int8
	Created     int64
}

func (q *Queries) CreateMediaVariant(ctx context.Context, arg CreateMediaVariantParams) (MediaVariant, error) {
	row := q.db.QueryRow(ctx, createMediaVariant,
		arg.MediaID,
		arg.VariantType,
		arg.Url,
		arg.Width,
		arg.Height,
		arg.FileSize,
		arg.Created,
	)
	var i MediaVariant
	err := row.Scan(
		&i.ID,
		&i.MediaID,
		&i.VariantType,
		&i.Url,
		&i.Width,
		&i.Height,
		&i.FileSize,
		&i.Created,
	)
	return i, err
}

const deleteMediaVariant = `-- name: DeleteMediaVariant :exec
DELETE FROM media_variants
WHERE id = $1
`

func (q *Queries) DeleteMediaVariant(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteMediaVariant, id)
	return err
}

const deleteMediaVariantsByMedia = `-- name: DeleteMediaVariantsByMedia :exec
DELETE FROM media_variants
WHERE media_id = $1
`

func (q *Queries) DeleteMediaVariantsByMedia(ctx context.Context, mediaID int64) error {
	_, err := q.db.Exec(ctx, deleteMediaVariantsByMedia, mediaID)
	return err
}

const deleteMediaVariantsByMediaAndType = `-- name: DeleteMediaVariantsByMediaAndType :exec
DELETE FROM media_variants
WHERE media_id = $1 AND variant_type = $2
`

type DeleteMediaVariantsByMediaAndTypeParams struct {
	MediaID     int64
	VariantType string
}

func (q *Queries) DeleteMediaVariantsByMediaAndType(ctx context.Context, arg DeleteMediaVariantsByMediaAndTypeParams) error {
	_, err := q.db.Exec(ctx, deleteMediaVariantsByMediaAndType, arg.MediaID, arg.VariantType)
	return err
}

const getMediaVariantByID = `-- name: GetMediaVariantByID :one
SELECT id, media_id, variant_type, url, width, height, file_size, created FROM media_variants
WHERE id = $1
`

func (q *Queries) GetMediaVariantByID(ctx context.Context, id int64) (MediaVariant, error) {
	row := q.db.QueryRow(ctx, getMediaVariantByID, id)
	var i MediaVariant
	err := row.Scan(
		&i.ID,
		&i.MediaID,
		&i.VariantType,
		&i.Url,
		&i.Width,
		&i.Height,
		&i.FileSize,
		&i.Created,
	)
	return i, err
}

const getMediaVariantByMediaAndType = `-- name: GetMediaVariantByMediaAndType :one
SELECT id, media_id, variant_type, url, width, height, file_size, created FROM media_variants
WHERE media_id = $1 AND variant_type = $2
LIMIT 1
`

type GetMediaVariantByMediaAndTypeParams struct {
	MediaID     int64
	VariantType string
}

func (q *Queries) GetMediaVariantByMediaAndType(ctx context.Context, arg GetMediaVariantByMediaAndTypeParams) (MediaVariant, error) {
	row := q.db.QueryRow(ctx, getMediaVariantByMediaAndType, arg.MediaID, arg.VariantType)
	var i MediaVariant
	err := row.Scan(
		&i.ID,
		&i.MediaID,
		&i.VariantType,
		&i.Url,
		&i.Width,
		&i.Height,
		&i.FileSize,
		&i.Created,
	)
	return i, err
}

const getTotalVariantsSizeByMedia = `-- name: GetTotalVariantsSizeByMedia :one
SELECT COALESCE(SUM(file_size), 0) as total_size
FROM media_variants
WHERE media_id = $1
`

func (q *Queries) GetTotalVariantsSizeByMedia(ctx context.Context, mediaID int64) (interface{}, error) {
	row := q.db.QueryRow(ctx, getTotalVariantsSizeByMedia, mediaID)
	var total_size interface{}
	err := row.Scan(&total_size)
	return total_size, err
}

const getVariantTypeStats = `-- name: GetVariantTypeStats :many
SELECT variant_type, COUNT(*) as count, COALESCE(SUM(file_size), 0) as total_size
FROM media_variants
GROUP BY variant_type
`

type GetVariantTypeStatsRow struct {
	VariantType string
	Count       int64
	TotalSize   interface{}
}

func (q *Queries) GetVariantTypeStats(ctx context.Context) ([]GetVariantTypeStatsRow, error) {
	rows, err := q.db.Query(ctx, getVariantTypeStats)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVariantTypeStatsRow
	for rows.Next() {
		var i GetVariantTypeStatsRow
		if err := rows.Scan(&i.VariantType, &i.Count, &i.TotalSize); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMediaVariantsByMedia = `-- name: ListMediaVariantsByMedia :many
SELECT id, media_id, variant_type, url, width, height, file_size, created FROM media_variants
WHERE media_id = $1
ORDER BY created DESC
`

func (q *Queries) ListMediaVariantsByMedia(ctx context.Context, mediaID int64) ([]MediaVariant, error) {
	rows, err := q.db.Query(ctx, listMediaVariantsByMedia, mediaID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MediaVariant
	for rows.Next() {
		var i MediaVariant
		if err := rows.Scan(
			&i.ID,
			&i.MediaID,
			&i.VariantType,
			&i.Url,
			&i.Width,
			&i.Height,
			&i.FileSize,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMediaVariantsByType = `-- name: ListMediaVariantsByType :many
SELECT id, media_id, variant_type, url, width, height, file_size, created FROM media_variants
WHERE variant_type = $1
ORDER BY created DESC
LIMIT $2 OFFSET $3
`

type ListMediaVariantsByTypeParams struct {
	VariantType string
	Limit       int32
	Offset      int32
}

func (q *Queries) ListMediaVariantsByType(ctx context.Context, arg ListMediaVariantsByTypeParams) ([]MediaVariant, error) {
	rows, err := q.db.Query(ctx, listMediaVariantsByType, arg.VariantType, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MediaVariant
	for rows.Next() {
		var i MediaVariant
		if err := rows.Scan(
			&i.ID,
			&i.MediaID,
			&i.VariantType,
			&i.Url,
			&i.Width,
			&i.Height,
			&i.FileSize,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
