// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: events.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countEvents = `-- name: CountEvents :one
SELECT COUNT(*) FROM events
`

func (q *Queries) CountEvents(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countEvents)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countEventsByUser = `-- name: CountEventsByUser :one
SELECT COUNT(*) FROM events
WHERE created_by_user_id = $1
`

func (q *Queries) CountEventsByUser(ctx context.Context, createdByUserID pgtype.Int8) (int64, error) {
	row := q.db.QueryRow(ctx, countEventsByUser, createdByUserID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (created_by_user_id, updated_by_user_id, name, description, cover_image_url, share_uuid, passcode, created, updated)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, created_by_user_id, updated_by_user_id, name, description, cover_image_url, share_uuid, passcode, created, updated
`

type CreateEventParams struct {
	CreatedByUserID pgtype.Int8
	UpdatedByUserID pgtype.Int8
	Name            string
	Description     pgtype.Text
	CoverImageUrl   pgtype.Text
	ShareUUID       pgtype.Text
	Passcode        pgtype.Text
	Created         int64
	Updated         int64
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createEvent,
		arg.CreatedByUserID,
		arg.UpdatedByUserID,
		arg.Name,
		arg.Description,
		arg.CoverImageUrl,
		arg.ShareUUID,
		arg.Passcode,
		arg.Created,
		arg.Updated,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.CreatedByUserID,
		&i.UpdatedByUserID,
		&i.Name,
		&i.Description,
		&i.CoverImageUrl,
		&i.ShareUUID,
		&i.Passcode,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE FROM events
WHERE id = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteEvent, id)
	return err
}

const getEventByID = `-- name: GetEventByID :one
SELECT id, created_by_user_id, updated_by_user_id, name, description, cover_image_url, share_uuid, passcode, created, updated FROM events
WHERE id = $1
`

func (q *Queries) GetEventByID(ctx context.Context, id int64) (Event, error) {
	row := q.db.QueryRow(ctx, getEventByID, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.CreatedByUserID,
		&i.UpdatedByUserID,
		&i.Name,
		&i.Description,
		&i.CoverImageUrl,
		&i.ShareUUID,
		&i.Passcode,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getEventByShareUUID = `-- name: GetEventByShareUUID :one
SELECT id, created_by_user_id, updated_by_user_id, name, description, cover_image_url, share_uuid, passcode, created, updated FROM events
WHERE share_uuid = $1
`

func (q *Queries) GetEventByShareUUID(ctx context.Context, shareUuid pgtype.Text) (Event, error) {
	row := q.db.QueryRow(ctx, getEventByShareUUID, shareUuid)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.CreatedByUserID,
		&i.UpdatedByUserID,
		&i.Name,
		&i.Description,
		&i.CoverImageUrl,
		&i.ShareUUID,
		&i.Passcode,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const listEvents = `-- name: ListEvents :many
SELECT id, created_by_user_id, updated_by_user_id, name, description, cover_image_url, share_uuid, passcode, created, updated FROM events
ORDER BY created DESC
LIMIT $1 OFFSET $2
`

type ListEventsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListEvents(ctx context.Context, arg ListEventsParams) ([]Event, error) {
	rows, err := q.db.Query(ctx, listEvents, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.CreatedByUserID,
			&i.UpdatedByUserID,
			&i.Name,
			&i.Description,
			&i.CoverImageUrl,
			&i.ShareUUID,
			&i.Passcode,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEventsByUser = `-- name: ListEventsByUser :many
SELECT id, created_by_user_id, updated_by_user_id, name, description, cover_image_url, share_uuid, passcode, created, updated FROM events
WHERE created_by_user_id = $1
ORDER BY created DESC
LIMIT $2 OFFSET $3
`

type ListEventsByUserParams struct {
	CreatedByUserID pgtype.Int8
	Limit           int32
	Offset          int32
}

func (q *Queries) ListEventsByUser(ctx context.Context, arg ListEventsByUserParams) ([]Event, error) {
	rows, err := q.db.Query(ctx, listEventsByUser, arg.CreatedByUserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.CreatedByUserID,
			&i.UpdatedByUserID,
			&i.Name,
			&i.Description,
			&i.CoverImageUrl,
			&i.ShareUUID,
			&i.Passcode,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchEvents = `-- name: SearchEvents :many
SELECT id, created_by_user_id, updated_by_user_id, name, description, cover_image_url, share_uuid, passcode, created, updated FROM events
WHERE name ILIKE '%' || $1 || '%'
   OR description ILIKE '%' || $1 || '%'
ORDER BY created DESC
LIMIT $2 OFFSET $3
`

type SearchEventsParams struct {
	Column1 pgtype.Text
	Limit   int32
	Offset  int32
}

func (q *Queries) SearchEvents(ctx context.Context, arg SearchEventsParams) ([]Event, error) {
	rows, err := q.db.Query(ctx, searchEvents, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.CreatedByUserID,
			&i.UpdatedByUserID,
			&i.Name,
			&i.Description,
			&i.CoverImageUrl,
			&i.ShareUUID,
			&i.Passcode,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvent = `-- name: UpdateEvent :one
UPDATE events
SET name = COALESCE($3, name),
    description = COALESCE($4, description),
    cover_image_url = COALESCE($5, cover_image_url),
    share_uuid = COALESCE($6, share_uuid),
    passcode = COALESCE($7, passcode),
    updated_by_user_id = COALESCE($8, updated_by_user_id),
    updated = $1
WHERE id = $2
RETURNING id, created_by_user_id, updated_by_user_id, name, description, cover_image_url, share_uuid, passcode, created, updated
`

type UpdateEventParams struct {
	Updated         int64
	ID              int64
	Name            pgtype.Text
	Description     pgtype.Text
	CoverImageUrl   pgtype.Text
	ShareUUID       pgtype.Text
	Passcode        pgtype.Text
	UpdatedByUserID pgtype.Int8
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, updateEvent,
		arg.Updated,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.CoverImageUrl,
		arg.ShareUUID,
		arg.Passcode,
		arg.UpdatedByUserID,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.CreatedByUserID,
		&i.UpdatedByUserID,
		&i.Name,
		&i.Description,
		&i.CoverImageUrl,
		&i.ShareUUID,
		&i.Passcode,
		&i.Created,
		&i.Updated,
	)
	return i, err
}
