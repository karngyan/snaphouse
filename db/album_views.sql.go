// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: album_views.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countAlbumViews = `-- name: CountAlbumViews :one
SELECT COUNT(*) FROM album_views
`

func (q *Queries) CountAlbumViews(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countAlbumViews)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countAlbumViewsByAlbum = `-- name: CountAlbumViewsByAlbum :one
SELECT COUNT(*) FROM album_views
WHERE album_id = $1
`

func (q *Queries) CountAlbumViewsByAlbum(ctx context.Context, albumID int64) (int64, error) {
	row := q.db.QueryRow(ctx, countAlbumViewsByAlbum, albumID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countAlbumViewsByAlbumAndDateRange = `-- name: CountAlbumViewsByAlbumAndDateRange :one
SELECT COUNT(*) FROM album_views
WHERE album_id = $1
  AND viewed_at >= $2
  AND viewed_at <= $3
`

type CountAlbumViewsByAlbumAndDateRangeParams struct {
	AlbumID    int64
	ViewedAt   int64
	ViewedAt_2 int64
}

func (q *Queries) CountAlbumViewsByAlbumAndDateRange(ctx context.Context, arg CountAlbumViewsByAlbumAndDateRangeParams) (int64, error) {
	row := q.db.QueryRow(ctx, countAlbumViewsByAlbumAndDateRange, arg.AlbumID, arg.ViewedAt, arg.ViewedAt_2)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUniqueIPsByAlbum = `-- name: CountUniqueIPsByAlbum :one
SELECT COUNT(DISTINCT ip_address) FROM album_views
WHERE album_id = $1
`

func (q *Queries) CountUniqueIPsByAlbum(ctx context.Context, albumID int64) (int64, error) {
	row := q.db.QueryRow(ctx, countUniqueIPsByAlbum, albumID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAlbumView = `-- name: CreateAlbumView :one
INSERT INTO album_views (album_id, ip_address, user_agent, referer, viewed_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, album_id, ip_address, user_agent, referer, viewed_at
`

type CreateAlbumViewParams struct {
	AlbumID   int64
	IPAddress pgtype.Text
	UserAgent pgtype.Text
	Referer   pgtype.Text
	ViewedAt  int64
}

func (q *Queries) CreateAlbumView(ctx context.Context, arg CreateAlbumViewParams) (AlbumView, error) {
	row := q.db.QueryRow(ctx, createAlbumView,
		arg.AlbumID,
		arg.IPAddress,
		arg.UserAgent,
		arg.Referer,
		arg.ViewedAt,
	)
	var i AlbumView
	err := row.Scan(
		&i.ID,
		&i.AlbumID,
		&i.IPAddress,
		&i.UserAgent,
		&i.Referer,
		&i.ViewedAt,
	)
	return i, err
}

const deleteAlbumView = `-- name: DeleteAlbumView :exec
DELETE FROM album_views
WHERE id = $1
`

func (q *Queries) DeleteAlbumView(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAlbumView, id)
	return err
}

const deleteAlbumViewsByAlbum = `-- name: DeleteAlbumViewsByAlbum :exec
DELETE FROM album_views
WHERE album_id = $1
`

func (q *Queries) DeleteAlbumViewsByAlbum(ctx context.Context, albumID int64) error {
	_, err := q.db.Exec(ctx, deleteAlbumViewsByAlbum, albumID)
	return err
}

const getAlbumViewByID = `-- name: GetAlbumViewByID :one
SELECT id, album_id, ip_address, user_agent, referer, viewed_at FROM album_views
WHERE id = $1
`

func (q *Queries) GetAlbumViewByID(ctx context.Context, id int64) (AlbumView, error) {
	row := q.db.QueryRow(ctx, getAlbumViewByID, id)
	var i AlbumView
	err := row.Scan(
		&i.ID,
		&i.AlbumID,
		&i.IPAddress,
		&i.UserAgent,
		&i.Referer,
		&i.ViewedAt,
	)
	return i, err
}

const getAlbumViewsGroupedByDay = `-- name: GetAlbumViewsGroupedByDay :many
SELECT DATE(TO_TIMESTAMP(viewed_at / 1000)) as day, COUNT(*) as views
FROM album_views
WHERE album_id = $1
  AND viewed_at >= $2
  AND viewed_at <= $3
GROUP BY day
ORDER BY day DESC
`

type GetAlbumViewsGroupedByDayParams struct {
	AlbumID    int64
	ViewedAt   int64
	ViewedAt_2 int64
}

type GetAlbumViewsGroupedByDayRow struct {
	Day   pgtype.Date
	Views int64
}

func (q *Queries) GetAlbumViewsGroupedByDay(ctx context.Context, arg GetAlbumViewsGroupedByDayParams) ([]GetAlbumViewsGroupedByDayRow, error) {
	rows, err := q.db.Query(ctx, getAlbumViewsGroupedByDay, arg.AlbumID, arg.ViewedAt, arg.ViewedAt_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAlbumViewsGroupedByDayRow
	for rows.Next() {
		var i GetAlbumViewsGroupedByDayRow
		if err := rows.Scan(&i.Day, &i.Views); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTopAlbumsByViews = `-- name: GetTopAlbumsByViews :many
SELECT album_id, COUNT(*) as view_count
FROM album_views
GROUP BY album_id
ORDER BY view_count DESC
LIMIT $1
`

type GetTopAlbumsByViewsRow struct {
	AlbumID   int64
	ViewCount int64
}

func (q *Queries) GetTopAlbumsByViews(ctx context.Context, limit int32) ([]GetTopAlbumsByViewsRow, error) {
	rows, err := q.db.Query(ctx, getTopAlbumsByViews, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTopAlbumsByViewsRow
	for rows.Next() {
		var i GetTopAlbumsByViewsRow
		if err := rows.Scan(&i.AlbumID, &i.ViewCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAlbumViews = `-- name: ListAlbumViews :many
SELECT id, album_id, ip_address, user_agent, referer, viewed_at FROM album_views
ORDER BY viewed_at DESC
LIMIT $1 OFFSET $2
`

type ListAlbumViewsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListAlbumViews(ctx context.Context, arg ListAlbumViewsParams) ([]AlbumView, error) {
	rows, err := q.db.Query(ctx, listAlbumViews, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AlbumView
	for rows.Next() {
		var i AlbumView
		if err := rows.Scan(
			&i.ID,
			&i.AlbumID,
			&i.IPAddress,
			&i.UserAgent,
			&i.Referer,
			&i.ViewedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAlbumViewsByAlbum = `-- name: ListAlbumViewsByAlbum :many
SELECT id, album_id, ip_address, user_agent, referer, viewed_at FROM album_views
WHERE album_id = $1
ORDER BY viewed_at DESC
LIMIT $2 OFFSET $3
`

type ListAlbumViewsByAlbumParams struct {
	AlbumID int64
	Limit   int32
	Offset  int32
}

func (q *Queries) ListAlbumViewsByAlbum(ctx context.Context, arg ListAlbumViewsByAlbumParams) ([]AlbumView, error) {
	rows, err := q.db.Query(ctx, listAlbumViewsByAlbum, arg.AlbumID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AlbumView
	for rows.Next() {
		var i AlbumView
		if err := rows.Scan(
			&i.ID,
			&i.AlbumID,
			&i.IPAddress,
			&i.UserAgent,
			&i.Referer,
			&i.ViewedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAlbumViewsByAlbumAndDateRange = `-- name: ListAlbumViewsByAlbumAndDateRange :many
SELECT id, album_id, ip_address, user_agent, referer, viewed_at FROM album_views
WHERE album_id = $1
  AND viewed_at >= $2
  AND viewed_at <= $3
ORDER BY viewed_at DESC
LIMIT $4 OFFSET $5
`

type ListAlbumViewsByAlbumAndDateRangeParams struct {
	AlbumID    int64
	ViewedAt   int64
	ViewedAt_2 int64
	Limit      int32
	Offset     int32
}

func (q *Queries) ListAlbumViewsByAlbumAndDateRange(ctx context.Context, arg ListAlbumViewsByAlbumAndDateRangeParams) ([]AlbumView, error) {
	rows, err := q.db.Query(ctx, listAlbumViewsByAlbumAndDateRange,
		arg.AlbumID,
		arg.ViewedAt,
		arg.ViewedAt_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AlbumView
	for rows.Next() {
		var i AlbumView
		if err := rows.Scan(
			&i.ID,
			&i.AlbumID,
			&i.IPAddress,
			&i.UserAgent,
			&i.Referer,
			&i.ViewedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAlbumViewsByIP = `-- name: ListAlbumViewsByIP :many
SELECT id, album_id, ip_address, user_agent, referer, viewed_at FROM album_views
WHERE ip_address = $1
ORDER BY viewed_at DESC
LIMIT $2 OFFSET $3
`

type ListAlbumViewsByIPParams struct {
	IPAddress pgtype.Text
	Limit     int32
	Offset    int32
}

func (q *Queries) ListAlbumViewsByIP(ctx context.Context, arg ListAlbumViewsByIPParams) ([]AlbumView, error) {
	rows, err := q.db.Query(ctx, listAlbumViewsByIP, arg.IPAddress, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AlbumView
	for rows.Next() {
		var i AlbumView
		if err := rows.Scan(
			&i.ID,
			&i.AlbumID,
			&i.IPAddress,
			&i.UserAgent,
			&i.Referer,
			&i.ViewedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
